C251 COMPILER V5.60.0,  flash                                                              27/12/23  12:51:18  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE flash
OBJECT MODULE PLACED IN .\Out_File\flash.obj
COMPILER INVOKED BY: C:\keil MCK\C251\BIN\C251.EXE flash.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(
                    -..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER\inc;..\
                    -USER\src) DEBUG PRINT(.\Out_File\flash.lst) TABS(2) OBJECT(.\Out_File\flash.obj) 

stmt  level    source

    1          #include "flash.h"
    2          #include "common.h"
    3          #include "zf_eeprom.h"
    4          #include "math.h"
    5          uint8 number=35;
    6          uint8 write_buff[4*45];     //写入eeprom的数据
    7          uint8 read_buff[4*45];    //读出eeprom的数据 
    8          uint32 Flash_Index=0x00;
    9          uint8 on_off_motion[5];
   10          uint8 ele[6];
   11          //PID参数
   12          struct flash_number flash;
   13          struct roudabout round;
   14          struct Kalman_Typedef Klm;
   15          uint8 lastP;
   16          //规定好几个位置来放置，然后取每位数进行进制换算
   17          
   18          
   19          
   20          
   21          
   22          float Read_Flash(void)
   23          {
   24   1        float Num=0;
   25   1        uint8 Len=0;
   26   1        uint8 Read_Char[1],Minus_Flag=0;
   27   1        iap_read_bytes(Flash_Index,Read_Char,1);
   28   1        while(Read_Char[0]!='\0')
   29   1        {
   30   2          if(Read_Char[0]>='0'&&Read_Char[0]<='9')
   31   2          {
   32   3            Num+=Read_Char[0]-'0';
   33   3            Num/=10;
   34   3            Len++;
   35   3          }
   36   2          else if(Read_Char[0]=='.')
   37   2          {
   38   3            Len=0;
   39   3          }
   40   2          else if(Read_Char[0]=='-')
   41   2          {
   42   3            Minus_Flag=1;
   43   3          }
   44   2          Flash_Index++;
   45   2          iap_read_bytes(Flash_Index,Read_Char,1);
   46   2        }
   47   1        Flash_Index++;
   48   1        while(Len!=0)
   49   1        {
   50   2          Num*=10;
   51   2          Len--;
   52   2        }
   53   1        if(Minus_Flag==1)
   54   1          Num=0-Num;
   55   1        return Num;
   56   1      }
   57          
C251 COMPILER V5.60.0,  flash                                                              27/12/23  12:51:18  PAGE 2   

   58          
   59          void Write_Flash(float Num,uint8 Bit)
   60          {
   61   1        uint8 Int_Len=0,Float_Len=0;
   62   1        uint8 Write_Char[12];
   63   1        int32 Data;
   64   1        if(Bit==0)
   65   1        {
   66   2          Data=(int32)(fabs(Num));
   67   2          while(Data!=0)
   68   2          {
   69   3            Write_Char[Int_Len]=Data%10+'0';
   70   3            Data/=10;
   71   3            Int_Len++;
   72   3          }
   73   2          if(Int_Len==0)
   74   2          {
   75   3            Write_Char[0]='0';
   76   3            Write_Char[1]='\0';
   77   3            Int_Len=2;
   78   3          }
   79   2          else
   80   2          {
   81   3            if(Num<0)
   82   3            {
   83   4              Write_Char[Int_Len]='-';
   84   4              Write_Char[Int_Len+1]='\0';
   85   4              Int_Len+=2;
   86   4            }
   87   3            else
   88   3            {
   89   4              Write_Char[Int_Len]='\0';
   90   4              Int_Len++;
   91   4            }
   92   3          }
   93   2          iap_write_bytes(Flash_Index,Write_Char,Int_Len);
   94   2          Flash_Index+=Int_Len;
   95   2        }
   96   1        else
   97   1        {
   98   2          for(Int_Len=0;Int_Len<Bit;Int_Len++)
   99   2          {
  100   3            Num*=10;
  101   3          }
  102   2          Int_Len=0;
  103   2          Data=(int32)(fabs(Num));
  104   2          while(Int_Len<Bit)
  105   2          {
  106   3            Write_Char[Int_Len]=Data%10+'0';
  107   3            Data/=10;
  108   3            Int_Len++;
  109   3          }
  110   2          Write_Char[Int_Len]='.';
  111   2          Int_Len++;
  112   2          while(Data!=0)
  113   2          {
  114   3            Write_Char[Int_Len+Float_Len]=Data%10+'0';
  115   3            Data/=10;
  116   3            Float_Len++;
  117   3          }
  118   2          if(Float_Len==0)
  119   2          {
  120   3            Write_Char[Int_Len]='0';
  121   3            if(Num<0)
  122   3            {
  123   4              Write_Char[Int_Len+1]='-';
C251 COMPILER V5.60.0,  flash                                                              27/12/23  12:51:18  PAGE 3   

  124   4              Write_Char[Int_Len+2]='\0';
  125   4              Float_Len+=3;
  126   4            }
  127   3            else
  128   3            {
  129   4              Write_Char[Int_Len+1]='\0';
  130   4              Float_Len+=2;
  131   4            }
  132   3          }
  133   2          else
  134   2          {
  135   3            if(Num<0)
  136   3            {
  137   4              Write_Char[Int_Len+Float_Len]='-';
  138   4              Write_Char[Int_Len+Float_Len+1]='\0';
  139   4              Float_Len+=2;
  140   4            }
  141   3            else
  142   3            {
  143   4              Write_Char[Int_Len+Float_Len]='\0';
  144   4              Float_Len++;
  145   4            }
  146   3          }
  147   2          iap_write_bytes(Flash_Index,Write_Char,Int_Len+Float_Len);
  148   2          Flash_Index=Flash_Index+Int_Len+Float_Len;
  149   2        }
  150   1      }
  151          void flash_read(void)
  152          {
  153   1        Flash_Index=0;
  154   1        
  155   1        
  156   1        p_zero=Read_Flash();
  157   1        d_zero=Read_Flash();
  158   1        delta_p_sm=Read_Flash();
  159   1        delta_p_bst=Read_Flash();
  160   1        delta_d_sm=Read_Flash();
  161   1        delta_d_bst=Read_Flash();
  162   1        str_roll_judge=Read_Flash();
  163   1        max_err_bound=Read_Flash(); 
  164   1        on_off_motion[0]=Read_Flash();
  165   1        on_off_motion[1]=Read_Flash();
  166   1        spd_kp=Read_Flash();
  167   1        spd_ki=Read_Flash();
  168   1        gyro_roll=Read_Flash();
  169   1        at_trace_pro=Read_Flash();
  170   1        out_pro=Read_Flash();
  171   1        roud_in_dif=Read_Flash();
  172   1        klm_R=Read_Flash();
  173   1        klm_Q=Read_Flash();
  174   1        klm_B=Read_Flash(); 
  175   1        lastP=Read_Flash();
  176   1        str_spd=Read_Flash();
  177   1        roll_spd=Read_Flash();
  178   1      
  179   1        integral_in=Read_Flash();
  180   1        integral_out=Read_Flash();
  181   1        roud_at_p=Read_Flash();
  182   1        roud_at_i=Read_Flash();
  183   1        roud_gy_p=Read_Flash();
  184   1        roud_gy_d=Read_Flash();
  185   1        brim_int=Read_Flash();
  186   1        mid_int=Read_Flash();
  187   1        roud_spd=Read_Flash();
  188   1        int_p=Read_Flash();
  189   1        int_d=Read_Flash();
C251 COMPILER V5.60.0,  flash                                                              27/12/23  12:51:18  PAGE 4   

  190   1        ele_num=Read_Flash();
  191   1        ele_Fir=Read_Flash();
  192   1        ele_Sec=Read_Flash();
  193   1        ele_Thr=Read_Flash();
  194   1        ele_For=Read_Flash();
  195   1        ele_Fiv=Read_Flash();
  196   1        ele_dir=Read_Flash();
  197   1        max_d_err_bound=Read_Flash();
  198   1        cross_idt=Read_Flash();
  199   1      }
  200          void flash_write(void)
  201          {
  202   1      //  uint8 i;
  203   1        float Input=1;
  204   1        Flash_Index=0;
  205   1        iap_erase_page(0);    //刷新页区
  206   1        //iap_erase_page(520);
  207   1        
  208   1      
  209   1        Write_Flash(p_zero,3);
  210   1        Write_Flash(d_zero,3);
  211   1        Write_Flash(delta_p_sm,3);
  212   1        Write_Flash(delta_p_bst,4);
  213   1        Write_Flash(delta_d_sm,4);
  214   1        Write_Flash(delta_d_bst,3);
  215   1        Write_Flash(str_roll_judge,4);  
  216   1        Write_Flash(max_err_bound,3); 
  217   1        Write_Flash((float)on_off_motion[0],3);
  218   1        Write_Flash((float)on_off_motion[1],3);
  219   1        Write_Flash(spd_kp,3);
  220   1        Write_Flash(spd_ki,3);
  221   1        Write_Flash(gyro_roll,2);
  222   1        Write_Flash(at_trace_pro,2);
  223   1        Write_Flash(out_pro,2);
  224   1        Write_Flash(roud_in_dif,3);
  225   1        Write_Flash(klm_R,3);  //R
  226   1        Write_Flash(klm_Q,3);  //Q
  227   1        Write_Flash(klm_B,3);     //B
  228   1        Write_Flash(lastP,3);  //lastp
  229   1        Write_Flash(str_spd,3);
  230   1        Write_Flash(roll_spd,3);
  231   1        Write_Flash(integral_in,3);
  232   1        Write_Flash(integral_out,3);
  233   1        Write_Flash(roud_at_p,3);
  234   1        Write_Flash(roud_at_i,3);
  235   1        Write_Flash(roud_gy_p,3);
  236   1        Write_Flash(roud_gy_d,3);
  237   1        Write_Flash(brim_int,3);
  238   1        Write_Flash(mid_int,3);
  239   1        Write_Flash(roud_spd,3);
  240   1        Write_Flash(int_p,3);
  241   1        Write_Flash(int_d,3);
  242   1        Write_Flash(ele_num,3);
  243   1        Write_Flash(ele_Fir,3);
  244   1        Write_Flash(ele_Sec,3);
  245   1        Write_Flash(ele_Thr,3);
  246   1        Write_Flash(ele_For,3);
  247   1        Write_Flash(ele_Fiv,3);
  248   1        Write_Flash(ele_dir,3);
  249   1        Write_Flash(max_d_err_bound,3);
  250   1        Write_Flash(cross_idt,3);
  251   1      
  252   1      }
  253          void flash_number_init(void)
  254          {
  255   1        p_zero=5;   
C251 COMPILER V5.60.0,  flash                                                              27/12/23  12:51:18  PAGE 5   

  256   1        d_zero=25; 
  257   1        delta_p_sm=3;
  258   1        delta_p_bst=9;
  259   1        delta_d_sm=10;
  260   1        delta_d_bst=15;
  261   1        spd_kp=80;
  262   1        spd_ki=26;
  263   1        str_spd=275;
  264   1        roll_spd=260;
  265   1        max_err_bound=40;
  266   1        max_d_err_bound=3;
  267   1        cross_idt=500;
*** WARNING C209 IN LINE 267 OF flash.c: 'constant': integral size mismatch
  268   1       //环岛参数
  269   1       gyro_roll=355;
  270   1       at_trace_pro=0.20;
  271   1       out_pro=0.78;
  272   1       roud_in_dif=200;
  273   1       integral_in=4;
  274   1       integral_out=4;
  275   1        roud_at_p=40;
  276   1        roud_at_i=20;
  277   1        roud_gy_p=3;
  278   1        roud_gy_d=10;
  279   1        brim_int=700;
  280   1        mid_int=900;
  281   1        roud_spd=255;
  282   1       int_p=12;
  283   1       int_d=48;
  284   1      
  285   1        
  286   1      //其余参数
  287   1       str_roll_judge=2;
  288   1       gyro_motion=2;
  289   1       idt_t_motion=2;
  290   1       feed_forward=2;
  291   1       gy_rd_motion=2;
  292   1       gy_bl_motion=1;
  293   1        
  294   1      
  295   1        //元素表
  296   1        ele_num=2;
  297   1        ele_dir=0;
  298   1        ele_Fir=0;
  299   1        ele_Sec=0;
  300   1        ele_Thr=0;
  301   1        ele_For=0;
  302   1        ele_Fiv=0;
  303   1        //卡尔曼
  304   1        klm_R=1;
  305   1        klm_Q=0.01;
  306   1        klm_B=0;
  307   1        lastP=0;
  308   1        
  309   1        
  310   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2392     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
C251 COMPILER V5.60.0,  flash                                                              27/12/23  12:51:18  PAGE 6   

  edata size           =       506     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        13     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
