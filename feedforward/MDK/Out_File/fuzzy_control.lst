C251 COMPILER V5.60.0,  fuzzy_control                                                      27/12/23  12:51:18  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE fuzzy_control
OBJECT MODULE PLACED IN .\Out_File\fuzzy_control.obj
COMPILER INVOKED BY: C:\keil MCK\C251\BIN\C251.EXE fuzzy_control.c XSMALL INTR2 WARNINGLEVEL(3) OPTIMIZE(0,SPEED) BROWSE
                    - INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\CODE;..\USER
                    -\inc;..\USER\src) DEBUG PRINT(.\Out_File\fuzzy_control.lst) TABS(2) OBJECT(.\Out_File\fuzzy_control.obj) 

stmt  level    source

    1          #include "fuzzy_control.h"
    2          #include "common.h"
    3          #include "flash.h"
    4          #include "pid_control.h"
    5          
    6          struct fuzzy_TypeDef fuzzy;
    7          float final_p;  //最终的p
    8          float final_d;  //最终的d
    9          
   10          
   11          
   12          //struct fuzzy_TypeDef* fuzzy
   13          //struct fuzzy_TypeDef fuzzy;
   14          void fuzzy_init(void)
   15          {
   16   1        fuzzy.p[0]=p_zero;
   17   1        fuzzy.p[1]=p_zero+delta_p_sm;
   18   1        fuzzy.p[2]=p_zero+delta_p_bst;
   19   1        fuzzy.d[0]=d_zero-delta_d_bst;
   20   1        fuzzy.d[1]=d_zero-delta_d_sm;
   21   1        fuzzy.d[2]=d_zero;
   22   1        fuzzy.d[3]=d_zero+delta_p_sm;
   23   1        fuzzy.d[4]=d_zero+delta_d_bst;
   24   1        
   25   1      }
   26          void degree_cal(float err,float d_err)   //err,d_err需要归一化后的输入
   27          {
   28   1      
   29   1        uint8 k_z=2;
   30   1        uint8 k_s_up=2;
   31   1        uint8 k_s_down=4;
   32   1        uint8 k_b=2.67;
   33   1        memset(fuzzy.degree_mem_p,0,sizeof(fuzzy.degree_mem_p));
   34   1        memset(fuzzy.degree_mem_d,0,sizeof(fuzzy.degree_mem_d));//每次计算前将隶属度清零
   35   1          //以下是基于自己设置好的隶属度函数求出的隶属度
   36   1        if(err>=0)
   37   1        {
   38   2          if(err<=0.5)
   39   2        {
   40   3          fuzzy.degree_mem_p[2]=1-k_z*err;
   41   3        }
   42   2        if(err<=0.75)
   43   2        {
   44   3          fuzzy.degree_mem_p[3]=(err >= 0.5) ? (3-k_s_down*err) : (k_s_up*err);
   45   3        }
   46   2        if(err>=0.375)
   47   2        {
   48   3          fuzzy.degree_mem_p[4]=(err >= 0.75) ? 1 : (k_b*err-1);
   49   3        }
   50   2        }
   51   1        else
   52   1        {
   53   2          if(err>=-0.5)
   54   2          {
   55   3            fuzzy.degree_mem_p[2]=k_z*err+1;
   56   3          }
   57   2          if(err>=-0.75)
C251 COMPILER V5.60.0,  fuzzy_control                                                      27/12/23  12:51:18  PAGE 2   

   58   2          {
   59   3            fuzzy.degree_mem_p[1] = (err >= -0.5) ? (-k_s_up*err) : (3+k_s_down*err);
   60   3          }
   61   2          if(err<=-0.375)
   62   2          {
   63   3            fuzzy.degree_mem_p[0] =(err >= -0.75) ? (-k_b*err-1) : 1;
   64   3          } 
   65   2        }
   66   1        if(d_err>=0)
   67   1        { 
   68   2          if(d_err<=0.5)
   69   2        {
   70   3          fuzzy.degree_mem_d[2]=1-k_z*d_err;
   71   3        }
   72   2        if(d_err<=0.75)
   73   2        {
   74   3          fuzzy.degree_mem_d[3]=(d_err >= 0.5) ? (3-k_s_down*d_err) : (k_s_up*d_err);
   75   3        }
   76   2        if(d_err>=0.375)
   77   2        {
   78   3          fuzzy.degree_mem_d[4]=(d_err >= 0.75) ? 1 : (k_b*d_err-1);  
   79   3        }
   80   2        }
   81   1        else
   82   1        {
   83   2          if(d_err>=-0.5)
   84   2          {
   85   3            fuzzy.degree_mem_d[2]=k_z*d_err+1;
   86   3          }
   87   2          if(d_err>=-0.75)
   88   2          {
   89   3            fuzzy.degree_mem_d[1] = (d_err >= -0.5) ? (-k_s_up*d_err) : (3+k_s_down*d_err);
   90   3          }
   91   2          if(d_err<=-0.375)
   92   2          {
   93   3            fuzzy.degree_mem_d[0] = (d_err >= -0.75) ? (-k_b*d_err-1) : 1;
   94   3          }
   95   2        }
   96   1      }
   97          float* mem_mutip(uint8 block)   //位于模糊规则左上，右上，左下，右下哪个区间
   98          {
   99   1        static float mem_mutip[9];  //从左到右，从上到下，3*3矩阵
  100   1        switch(block)
  101   1        {
  102   2          case 0:
  103   2          {
  104   3      
  105   3            
  106   3            mem_mutip[0]=fuzzy.degree_mem_p[0]*fuzzy.degree_mem_d[0];
  107   3            mem_mutip[1]=fuzzy.degree_mem_p[1]*fuzzy.degree_mem_d[0];
  108   3            mem_mutip[2]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[0];
  109   3            mem_mutip[3]=fuzzy.degree_mem_p[0]*fuzzy.degree_mem_d[1];
  110   3            mem_mutip[4]=fuzzy.degree_mem_p[1]*fuzzy.degree_mem_d[1];
  111   3            mem_mutip[5]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[1];
  112   3            mem_mutip[6]=fuzzy.degree_mem_p[0]*fuzzy.degree_mem_d[2];
  113   3            mem_mutip[7]=fuzzy.degree_mem_p[1]*fuzzy.degree_mem_d[2];
  114   3            mem_mutip[8]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[2];
  115   3            break;
  116   3          }
  117   2          case 1:
  118   2          {//2
  119   3            
  120   3            mem_mutip[0]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[0];
  121   3            mem_mutip[1]=fuzzy.degree_mem_p[3]*fuzzy.degree_mem_d[0];
  122   3            mem_mutip[2]=fuzzy.degree_mem_p[4]*fuzzy.degree_mem_d[0];
  123   3            mem_mutip[3]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[1];
C251 COMPILER V5.60.0,  fuzzy_control                                                      27/12/23  12:51:18  PAGE 3   

  124   3            mem_mutip[4]=fuzzy.degree_mem_p[3]*fuzzy.degree_mem_d[1];
  125   3            mem_mutip[5]=fuzzy.degree_mem_p[4]*fuzzy.degree_mem_d[1];
  126   3            mem_mutip[6]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[2];
  127   3            mem_mutip[7]=fuzzy.degree_mem_p[3]*fuzzy.degree_mem_d[2];
  128   3            mem_mutip[8]=fuzzy.degree_mem_p[4]*fuzzy.degree_mem_d[2];
  129   3            break;
  130   3          }
  131   2          case 2:
  132   2          {//1
  133   3            
  134   3            mem_mutip[0]=fuzzy.degree_mem_p[0]*fuzzy.degree_mem_d[2];
  135   3            mem_mutip[1]=fuzzy.degree_mem_p[1]*fuzzy.degree_mem_d[2];
  136   3            mem_mutip[2]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[2];
  137   3            mem_mutip[3]=fuzzy.degree_mem_p[0]*fuzzy.degree_mem_d[3];
  138   3            mem_mutip[4]=fuzzy.degree_mem_p[1]*fuzzy.degree_mem_d[3];
  139   3            mem_mutip[5]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[3];
  140   3            mem_mutip[6]=fuzzy.degree_mem_p[0]*fuzzy.degree_mem_d[4];
  141   3            mem_mutip[7]=fuzzy.degree_mem_p[1]*fuzzy.degree_mem_d[4];
  142   3            mem_mutip[8]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[4];
  143   3            break;
  144   3          }
  145   2          case 3:
  146   2          {
  147   3            
  148   3            mem_mutip[0]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[2];
  149   3            mem_mutip[1]=fuzzy.degree_mem_p[3]*fuzzy.degree_mem_d[2];
  150   3            mem_mutip[2]=fuzzy.degree_mem_p[4]*fuzzy.degree_mem_d[2];
  151   3            mem_mutip[3]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[3];
  152   3            mem_mutip[4]=fuzzy.degree_mem_p[3]*fuzzy.degree_mem_d[3];
  153   3            mem_mutip[5]=fuzzy.degree_mem_p[4]*fuzzy.degree_mem_d[3];
  154   3            mem_mutip[6]=fuzzy.degree_mem_p[2]*fuzzy.degree_mem_d[4];
  155   3            mem_mutip[7]=fuzzy.degree_mem_p[3]*fuzzy.degree_mem_d[4];
  156   3            mem_mutip[8]=fuzzy.degree_mem_p[4]*fuzzy.degree_mem_d[4];
  157   3            break;
  158   3          }
  159   2        }
  160   1        return mem_mutip;
  161   1      }
  162          void fuzzy_rule(float err,float d_err) //计算得到最终的p和d值
  163          {
  164   1        uint8 i;
  165   1        float* mem_mutiple;
  166   1        
  167   1        float total_mem_p=0;
  168   1        float total_mem_d=0;
  169   1          
  170   1        for(i=0;i<5;i++)
  171   1        {
  172   2          total_mem_p+=fuzzy.degree_mem_p[i];
  173   2          total_mem_d+=fuzzy.degree_mem_d[i];
  174   2        }
  175   1        for(i=0;i<5;i++)
  176   1        {
  177   2          fuzzy.degree_mem_p[i]=fuzzy.degree_mem_p[i]/total_mem_p;
  178   2          fuzzy.degree_mem_d[i]=fuzzy.degree_mem_d[i]/total_mem_d;
  179   2        }  //归一化
  180   1        if(err<=0&&d_err<=0)
  181   1        { 
  182   2          mem_mutiple=mem_mutip(0);
  183   2          final_p=fuzzy.p[2]*(mem_mutiple[0]+mem_mutiple[3]+mem_mutiple[6])+fuzzy.p[1]*(mem_mutiple[1]+mem_mutipl
             -e[4]+mem_mutiple[7])+fuzzy.p[0]*(mem_mutiple[2]+mem_mutiple[5]+mem_mutiple[8]);
  184   2          final_d=fuzzy.d[4]*(mem_mutiple[0]+mem_mutiple[1])+fuzzy.d[3]*(mem_mutiple[3]+mem_mutiple[4])+fuzzy.d[0
             -]*mem_mutiple[2]+fuzzy.d[1]*mem_mutiple[5]+fuzzy.d[2]*(mem_mutiple[6]+mem_mutiple[7]+mem_mutiple[8]);
  185   2        }
  186   1        else if(err>=0&&d_err<=0)
  187   1        {
C251 COMPILER V5.60.0,  fuzzy_control                                                      27/12/23  12:51:18  PAGE 4   

  188   2          mem_mutiple=mem_mutip(1); 
  189   2          final_p=fuzzy.p[0]*(mem_mutiple[0]+mem_mutiple[3]+mem_mutiple[6])+fuzzy.p[1]*(mem_mutiple[1]+mem_mutipl
             -e[4]+mem_mutiple[7])+fuzzy.p[2]*(mem_mutiple[2]+mem_mutiple[5]+mem_mutiple[8]);
  190   2          final_d=fuzzy.d[0]*(mem_mutiple[0]+mem_mutiple[2])+fuzzy.d[1]*(mem_mutiple[3]+mem_mutiple[5])+fuzzy.d[3
             -]*mem_mutiple[4]+fuzzy.d[4]*mem_mutiple[1]+fuzzy.d[2]*(mem_mutiple[6]+mem_mutiple[7]+mem_mutiple[8]);
  191   2        }
  192   1        else if(err<=0&&d_err>=0)
  193   1        {
  194   2          mem_mutiple=mem_mutip(2); 
  195   2          final_p=fuzzy.p[2]*(mem_mutiple[0]+mem_mutiple[3]+mem_mutiple[6])+fuzzy.p[1]*(mem_mutiple[1]+mem_mutipl
             -e[4]+mem_mutiple[7])+fuzzy.p[0]*(mem_mutiple[2]+mem_mutiple[5]+mem_mutiple[8]);
  196   2          final_d=fuzzy.d[0]*(mem_mutiple[6]+mem_mutiple[8])+fuzzy.d[1]*(mem_mutiple[3]+mem_mutiple[5])+fuzzy.d[2
             -]*(mem_mutiple[0]+mem_mutiple[1]+mem_mutiple[2])+fuzzy.d[3]*mem_mutiple[4]+fuzzy.d[4]*mem_mutiple[7];
  197   2        }
  198   1        else if(err>=0&&d_err>=0)
  199   1        {
  200   2          mem_mutiple=mem_mutip(3); 
  201   2          final_p=fuzzy.p[0]*(mem_mutiple[0]+mem_mutiple[3]+mem_mutiple[6])+fuzzy.p[1]*(mem_mutiple[1]+mem_mutipl
             -e[4]+mem_mutiple[7])+fuzzy.p[2]*(mem_mutiple[2]+mem_mutiple[5]+mem_mutiple[8]);
  202   2          final_d=fuzzy.d[0]*mem_mutiple[6]+fuzzy.d[1]*mem_mutiple[3]+fuzzy.d[2]*(mem_mutiple[0]+mem_mutiple[1]+m
             -em_mutiple[2])+fuzzy.d[3]*(mem_mutiple[4]+mem_mutiple[5])+fuzzy.d[4]*(mem_mutiple[7]+mem_mutiple[8]);
  203   2        }
  204   1      }
  205          float uniform(float input,float input_max)
  206          {
  207   1        float out_put;
  208   1        out_put=(input+input_max)/input_max-1;
  209   1        //进行归一化，这里默认最小值与最大值相等
  210   1        return out_put;
  211   1      }
  212          void fuzzy_pid(float err,float d_err)
  213          {
  214   1        float actual_err;
  215   1        float actual_d_err;
  216   1        actual_err=uniform(err,max_err_bound);
  217   1        actual_d_err=uniform(d_err,max_d_err_bound);  
  218   1        degree_cal(actual_err,actual_d_err);
  219   1        fuzzy_rule(actual_err,actual_d_err);
  220   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3830     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       159     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
